{
  "instanceDetails": {
    "instance": "Avagate",
    "parentMID": "534001218",
    "activeMID": "534001218"
  },
  "contentBuilder": {
    "folders": [
      {
        "id": 102772,
        "name": "stream_demo_ssjs",
        "parentId": 35088,
        "categoryType": "asset",
        "rootFolder": false,
        "folderPath": "Content Builder/stream_demo_ssjs"
      },
      {
        "id": 102773,
        "name": "ssjs_classes",
        "parentId": 102772,
        "categoryType": "asset",
        "rootFolder": false,
        "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes"
      },
      {
        "id": 102774,
        "name": "config",
        "parentId": 102773,
        "categoryType": "asset",
        "rootFolder": false,
        "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/config"
      }
    ],
    "assets": [
      {
        "bldrId": "ac5476c6-587f-4f48-8567-ba63a00a92f3",
        "name": "_ssjs_api",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock"
        },
        "category": {
          "id": 102773,
          "name": "ssjs_classes",
          "parentId": 102772,
          "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/_ssjs_api.js"
        },
        "content": "<script runat=\"server\">\nPlatform.Load(\"core\", \"1.1.1\");\n\nfunction api() {\n\n    var fn = {}\n\n    fn.auth = function(config) {\n        if (!config) { return 'configuration required'; }\n        if (!config.clientID) { return 'clientID required'; }\n        if (!config.clientSecret) { return 'clientSecret required'; }\n        if (!config.grantType) { return 'grantType required'; }\n        if (!config.authBase) { return 'authBase required'; }\n        if (!config.mid) { return 'account mid required'; }\n\n        var authPayload = {\n            client_id: config.clientID,\n            client_secret: config.clientSecret,\n            grant_type: config.grantType,\n            account_id: config.mid\n        }\n\n        try {\n            var req = new Script.Util.HttpRequest(config.authBase + \"v2/token\");\n            req.emptyContentHandling = 0;\n            req.retries = 2;\n            req.continueOnError = true;\n            req.contentType = \"application/json\"\n            req.method = \"POST\";\n            req.postData = Stringify(authPayload);\n\n            var resp = req.send();\n            var resultStr = String(resp.content);\n            var resultJSON = Platform.Function.ParseJSON(resultStr);\n\n            var response = resultJSON[\"Response\"][0];\n            var accessToken = resultJSON.access_token;\n\n            return accessToken;\n\n        } catch (err) {\n            return err\n        }\n    }\n\n\n    fn.scriptUtil = function(config, accessToken) {\n        if (!config) { return 'configuration is reqired' }\n        if (!config.url) { return 'configuration url is required' }\n        if (!accessToken) { return 'unauthenticated' }\n\n        try {\n            var req = new Script.Util.HttpRequest(config.url);\n            req.emptyContentHandling = 0;\n            req.retries = 2;\n            req.continueOnError = true;\n            req.contentType = \"application/json\"\n            req.method = \"GET\";\n            req.setHeader(\"Authorization\", \"Bearer \" + accessToken);\n\n            var resp = req.send();\n            var resultStr = String(resp.content);\n            var resultJSON = Platform.Function.ParseJSON(resultStr);\n\n            return resultJSON;\n        } catch (err) {\n            return err\n        };\n    }\n\n    fn.loadS2SConfig = function(client, mid){\n            if(!client) { return 'client configuration is required' }\n             \n        return {\n            authBase: \"https://\" + client.subdomain + \".auth.marketingcloudapis.com/\",\n            restBase: \"https://\" + client.subdomain + \".rest.marketingcloudapis.com/\",\n            clientID: client.s2s.clientID,\n            clientSecret: client.s2s.clientSecret,\n            grantType: \"client_credentials\",\n            mid: !mid ? client.parentMid : mid\n        }\n    }\n    return fn\n}\n\n\n\n</script>",
        "id": 104740,
        "customerKey": "f4fd8d63-ed95-4583-8750-d6c1d1e98fd7"
      },
      {
        "bldrId": "84d6f425-0a40-4607-94d4-a41064214809",
        "name": "_ssjs_oauth",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock"
        },
        "category": {
          "id": 102773,
          "name": "ssjs_classes",
          "parentId": 102772,
          "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/_ssjs_oauth.js"
        },
        "content": "<script runat=\"server\">\nPlatform.Load(\"core\", \"1.1.1\");\n\nfunction oauth() {\n\n    var fn = {}\n\n    \n\n    return fn\n}\n\n\n\n</script>",
        "id": 104741,
        "customerKey": "64f37f68-54b0-4cb3-a3cc-7aab2f3e5a03"
      },
      {
        "bldrId": "c36ca2ed-8416-42af-a62a-2318fcca128b",
        "name": "_ssjs_util",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock"
        },
        "category": {
          "id": 102773,
          "name": "ssjs_classes",
          "parentId": 102772,
          "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/_ssjs_util.js"
        },
        "content": "<script runat=\"server\">\nPlatform.Load(\"core\", \"1.1.1\");\n\nfunction util() {\n    var fn = {}\n\n    fn.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n    \n    \n    fn.response = function(arg) {\n        Write(Stringify(arg))\n    }\n\n\n    fn.proxyContext = function(prox, mid) {\n        if (mid) {\n            //reset previous settings\n            prox.resetClientIds();\n            // Set ClientID \n            prox.setClientId({\n                \"ID\": mid\n            });\n        }\n        return prox\n    }\n\n\n    fn.deBug = function(action, response, logExtKey, debug) {\n        if (response) {\n            debug ? Write(\"<br><b>\" + action + \":</b><br> \" + Stringify(response) + \"<br><br>\") : null;\n        } else {\n            debug ? Write(\"<br><b>\" + action + \"</b><br> \") : null;\n        }\n\n        if (logExtKey) {\n            var log = {\n                action: action ? action : null,\n                log: response ? response : null\n            }\n\n            addLog(log, logExtKey);\n        }\n    }\n\n\n    /***********************************************\n     *\n     *   function addLog()\n     *   Pushes logging object to array to be written to a Data Extension\n     *   \n     *    @param obj {Object} logging object that matches the data extension\n     *    @param logExtKey {String} External Key to log records to\n     *    \n     ***********************************************/\n    fn.addLog = function(obj, logExtKey) {\n        var logDE = DataExtension.Init(logExtKey);\n        var logAction = logDE.Rows.Add(obj);\n    };\n\n\n    /***********************************************\n     * \n     * function getDataExtensionKey()\n     * Retieves the External Key for a SFMC Data Extension\n     * \n     * @param name {String} Name of the data extension\n     * @return {string} External Key of data extension\n     * \n     ***********************************************/\n    fn.getDataExtensionKey = function(name) {\n        var de = DataExtension.Retrieve({\n            Property: \"Name\",\n            SimpleOperator: \"equals\",\n            Value: name\n        });\n\n        var logKey = de[0].CustomerKey;\n\n        return logKey;\n    }\n\n\n    /***********************************************\n     * \n     * getFolderByName Function\n     * @name {string} - name of data extension to retrieve\n     * @contentType {string} - SFMC context: dataextension, ssjsactivity, asset,etc\n     * \n    ***********************************************/\n    fn.getFolderIDByName = function(config) {\n\n    if(!config.name) {\n        return 'folder name required'\n    }\n\n    if(!config.contentType) {\n        return 'contentType is required'\n    }\n\n\n    if(!config.parentFolderName){\n        var folderFilter = {\n            LeftOperand: {\n              Property: \"Name\",\n              SimpleOperator: \"equals\",\n              Value: config.name\n            },\n            LogicalOperator: \"AND\",\n            RightOperand: {\n              Property: \"ContentType\",\n              SimpleOperator: \"equals\",\n              Value: config.contentType\n            }\n          }\n    } else {\n        var folderFilter = {\n            LeftOperand: {\n              Property: \"Name\",\n              SimpleOperator: \"equals\",\n              Value: config.name\n            },\n            LogicalOperator: \"AND\",\n            RightOperand: {\n                LeftOperand: {\n                    Property: \"ParentFolder.Name\",\n                    SimpleOperator: \"equals\",\n                    Value: config.parentFolderName\n                  },\n                  LogicalOperator: \"AND\",\n                  RightOperand: {\n                    Property: \"ContentType\",\n                    SimpleOperator: \"equals\",\n                    Value: config.contentType\n                  }\n            }\n          }\n    }\n\n\n    var folderConfig = {\n      soapObjName: \"DataFolder\",\n      cols:[\"Name\", \"ID\", \"ParentFolder.ID\", \"ContentType\", \"ParentFolder.Name\",\"ObjectID\"],\n      filter: folderFilter\n    }\n\n    if(config.mid){\n        folderConfig.mid = config.mid\n    }\n\n    var res = wsRetrieve(folderConfig);\n    var folderID = res.Results[0].ID;\n    return folderID\n  }\n\n    \n    fn.queryStringToJSON = function(url) {\n        var query = url.split('?')[1] \n        var pairs = query.split('&');\n        \n        var result = {};\n        for(var q = 0; q < pairs.length; q++){\n            pair = pairs[q].split('=');\n            result[pair[0]] = decodeURIComponent(pair[1] || '');\n        }\n\n        return result;\n    }\n    \n    return fn\n}\n\n</script>",
        "id": 104742,
        "customerKey": "6a829890-3482-409e-8955-3a537527a48f"
      },
      {
        "bldrId": "9a69e32f-4746-40fd-b6cf-4cdef320a3f9",
        "name": "_ssjs_wsproxy",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock"
        },
        "category": {
          "id": 102773,
          "name": "ssjs_classes",
          "parentId": 102772,
          "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/_ssjs_wsproxy.js"
        },
        "content": "<script runat=\"server\">\nPlatform.Load(\"core\", \"1.1.1\");\n\n/******\n    ws.retrieve\n    var config = {\n        soapObjName: \"\", //required\n        cols: [], //required\n        mid: \"\", //optional\n        filter: {}, //optional\n        opts: {}, //optional\n        props: {} //optional\n    }\n\n    ws.create\n    var config = {\n        soapObjName: \"\", //required\n        payload: {}, //required\n        mid: \"\" //optional\n    }\n\n    ws.update\n    var config = {\n        soapObjName: \"\", //required\n        payload: {}, //required\n        options: {} //required\n    }\n\n    ws.perform\n    var config = {\n        soapObjName: \"\", //required\n        payload: {}, //required\n        options: {} //required\n    }\n ******/\nfunction wsproxy() {\n    var prox = new Script.Util.WSProxy();\n    var fn = {};\n\n    /*******************************\n     * @config {Object}\n     * @continueRequest {Boolean}\n     * @return {Array}\n     ******************************/\n    fn.retrieve = function(config, continueRequest) {\n\n        var reqID;\n        var moreData = true;\n        var continueRequest = continueRequest ? continueRequest : false;\n        var obj = config.soapObjName ? config.soapObjName : null;\n        var opts = config.opts ? config.opts : {};\n        var props = config.props ? config.props : {};\n        var filter = config.filter ? config.filter : {};\n        var cols = config.cols ? config.cols : null;\n        var mid = config.mid ? config.mid : null;\n        prox = mid ? util.proxyContext(prox, mid) : prox;\n\n        if (!config) { return 'configuration required'; }\n        if (!obj) { return 'SOAP object is required'; }\n\n        var resultsOut = [];\n\n        // my script to set the values for function\n        while (moreData) {\n            moreData = false;\n            if (reqID == null) {\n                if (filter) {\n                    var data = prox.retrieve(obj, cols, filter, opts, props);\n                } else {\n                    var data = prox.retrieve(obj, cols);\n                }\n            } else {\n                var data = prox.getNextBatch(obj, reqID);\n            }\n\n            if (data != null) {\n\n                if (continueRequest) {\n                    moreData = data.HasMoreRows;\n                    reqID = data.RequestID;\n                }\n\n                //my script to interact with results\n                if (data && data.Results) {\n                    for (var i = 0; i < data.Results.length; i++) {\n                        resultsOut.push(data.Results[i]);\n                    }\n                }\n            }\n        }\n\n\n        var res = {\n            results: resultsOut\n        }\n        return res\n    } // end retreive\n\n\n    /*******************************\n     * @config {Object}\n     * @return {Object}\n     ******************************/\n    fn.create = function(config) {\n        var obj = config.soapObjName ? config.soapObjName : null;\n        var payload = config.payload ? config.payload : null;\n        var mid = config.mid ? config.mid : null;\n        prox = mid ? util.proxyContext(prox, mid) : prox;\n\n        if (!config) { return 'configuration required'; }\n        if (!obj) { return 'configuration required'; }\n        if (!payload) { return 'payload is required'; }\n\n        var batch = util.isArray(payload);\n\n        if (batch) {\n            var res = prox.createBatch(obj, payload);\n        } else {\n            var res = prox.createItem(obj, payload);\n        }\n\n        return res;\n    } // end create\n\n    /*******************************\n     * @config {Object}\n     * @return {Object}\n     ******************************/\n    fn.update = function(config) {\n        var obj = config.soapObjName ? config.soapObjName : null;\n        var payload = config.payload ? config.payload : null;\n        var options = config.options ? config.options : null;\n        var mid = config.mid ? config.mid : null;\n        prox = mid ? util.proxyContext(prox, mid) : prox;\n\n        if (!config) { return 'configuration required'; }\n        if (!obj) { return 'SOAP object is required'; }\n        if (!payload) { return 'payload is required'; }\n\n        var batch = util.isArray(payload);\n\n        if (batch) {\n            var res = prox.updateBatch(obj, payload, options);\n        } else {\n            var res = prox.updateItem(obj, payload, options);\n        }\n\n        return res;\n    } // end update\n\n\n    /*******************************\n     * @config {Object}\n     * @return {Object}\n     ******************************/\n    fn.perform = function(config) {\n        var obj = config.soapObjName ? config.soapObjName : null;\n        var props = payload.props ? payload.props : {};\n        var action = payload.action ? payload.action : {};\n        var opts = payload.opts ? payload.opts : {};\n\n        var mid = config.mid ? config.mid : null;\n        prox = mid ? util.proxyContext(prox, mid) : prox;\n\n        if (!config) { return 'configuration required'; }\n        if (!obj) { return 'SOAP object is required'; }\n        if (!payload) { return 'payload is required'; }\n\n        var res = prox.performItem(obj, props, action, opts);\n        return res;\n    } // end perform\n\n    return fn\n}\n\n</script>\n",
        "id": 104743,
        "customerKey": "57c1bfbe-7436-4140-a2e8-e07f86dbbfd4"
      },
      {
        "bldrId": "082654fa-f785-4c58-84e6-322e61aab444",
        "name": "api_config",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock"
        },
        "category": {
          "id": 102774,
          "name": "config",
          "parentId": 102773,
          "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/config/api_config.js"
        },
        "content": "<script runat=\"server\">\nPlatform.Load(\"core\", \"1.1.1\");\n/***********************************************\n*   \n*   // To use these functions within your script use the\n*   // the following two lines to initialize the apiConfig settings\n*   // and set your accessToken variable.\n*   \n*   var apiConfig = getAPIConfig();\n*   var accessToken = auth(apiConfig, debug, runID); \n***********************************************/\n\n/***********************************************\n*\n*   function getAPIConfig()\n*   Sets all Credentials for RestAPI\n*\n***********************************************/\n\n  function getAPIConfig() {\n    return {\n      authBase:\"authentication_uri\",\n      restBase:\"rest_uri\",\n      contentType:\"application/json\",\n      grantType:\"client_credentials\",\n      mid: \"parentMID\",\n      clientID:\"client_id\",\n      clientSecret:\"client_secret\"\n    };\n  };\n\n</script>",
        "id": 104744,
        "customerKey": "f009028e-1f57-4124-b8b6-24df25308a1d"
      },
      {
        "bldrId": "4e6f1db1-fbc1-48a0-8e2a-f96bc83ee335",
        "name": "ssjs_dataExtensions",
        "assetType": {
          "id": 220,
          "name": "codesnippetblock"
        },
        "category": {
          "id": 102773,
          "name": "ssjs_classes",
          "parentId": 102772,
          "folderPath": "Content Builder/stream_demo_ssjs/ssjs_classes/ssjs_dataExtensions.js"
        },
        "content": "<script runat=\"server\">\nPlatform.Load(\"core\", \"1.1.1\");\n\nfunction dataExtensions() {\n    var fn = {}\n    \n    fn.search = function(filter, mid){\n        var config = {\n            soapObjName: 'DataExtension',\n            cols: ['Name','CustomerKey'],\n            filter: filter\n        }\n\n        if(mid){\n            config.mid = mid;\n        }\n\n        var resp = ws.retrieve(config)\n        \n       return resp\n    }\n\n    return fn\n}\n</script>",
        "id": 104745,
        "customerKey": "2d1efd07-0cc9-48a3-b8dc-abd668c74079"
      }
    ]
  }
}